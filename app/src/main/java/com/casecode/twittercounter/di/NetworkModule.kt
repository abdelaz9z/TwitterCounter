package com.casecode.twittercounter.di

import com.casecode.twittercounter.BuildConfig
import com.casecode.twittercounter.data.retrofit.TweetsApiService
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

/**
 * Provides network-related dependencies, such as OkHttpClient and Retrofit instances,
 * configured for use with Twitter's API. This module is installed in the [SingletonComponent],
 * so the provided dependencies are available as singletons across the entire application.
 */
@Module
@InstallIn(SingletonComponent::class)
object NetworkModule {

    /**
     * Provides a singleton [OkHttpClient] configured with an OAuth interceptor for authenticating
     * requests to the Twitter API.
     *
     * @return An instance of [OkHttpClient] with OAuth credentials attached to each request.
     */
    @Singleton
    @Provides
    fun provideOkHttpClient(): OkHttpClient {
        // Retrieve OAuth credentials from BuildConfig
        val consumerKey = BuildConfig.CONSUMER_KEY
        val consumerSecret = BuildConfig.CONSUMER_SECRET
        val accessToken = BuildConfig.ACCESS_TOKEN
        val tokenSecret = BuildConfig.TOKEN_SECRET

        // Create an OAuth interceptor with the provided credentials
        val oauthInterceptor = OAuthInterceptor(
            apiKey = consumerKey,
            apiSecret = consumerSecret,
            accessToken = accessToken,
            accessTokenSecret = tokenSecret
        )

        // Build and return the OkHttpClient instance
        return OkHttpClient.Builder()
            .addInterceptor(oauthInterceptor)
            .build()
    }

    /**
     * Provides a singleton [Retrofit] instance configured with the base URL, OkHttp client,
     * and a JSON converter for interacting with Twitter's API.
     *
     * @param okHttpClient The [OkHttpClient] configured with OAuth authentication.
     * @return An instance of [Retrofit] set up to communicate with the Twitter API.
     */
    @Singleton
    @Provides
    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {
        return Retrofit.Builder()
            .baseUrl(BuildConfig.BASE_URL) // Base URL from BuildConfig
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create()) // JSON converter
            .build()
    }

    /**
     * Provides an instance of [TweetsApiService] for making requests to the Twitter API.
     *
     * @param retrofit The [Retrofit] instance for network communication.
     * @return A [TweetsApiService] implementation generated by Retrofit.
     */
    @Singleton
    @Provides
    fun provideYourApiService(retrofit: Retrofit): TweetsApiService {
        return retrofit.create(TweetsApiService::class.java)
    }
}
